#!/bin/bash

set -e

echo "I: Configuring TwinaOS Live System"

# Enable root auto-login for Getty
mkdir -p /etc/systemd/system/getty@tty1.service.d
cat > /etc/systemd/system/getty@tty1.service.d/override.conf << 'EOF'
[Service]
ExecStart=
ExecStart=-/sbin/agetty --noissue --autologin root %I $TERM
Type=idle
EOF

# Create a non-root user for cage
useradd -m -s /bin/bash -G audio,video,input,render,dialout twinaos || true
echo "twinaos:twinaos" | chpasswd

# Create cage startup script
cat > /usr/local/bin/start-cage << 'EOF'
#!/bin/bash

# Wait for graphics and udev to be ready
sleep 5

# Ensure graphics devices are available
modprobe drm 2>/dev/null || true
modprobe i915 2>/dev/null || true
modprobe amdgpu 2>/dev/null || true
modprobe radeon 2>/dev/null || true
modprobe nouveau 2>/dev/null || true

# Set proper permissions for graphics devices
chmod 666 /dev/dri/* 2>/dev/null || true
chmod 666 /dev/fb* 2>/dev/null || true
chown root:video /dev/dri/* 2>/dev/null || true

# Set environment variables for Wayland
export XDG_RUNTIME_DIR="/run/user/1000"
export WAYLAND_DISPLAY="wayland-0"
export XDG_SESSION_TYPE="wayland"
export GDK_BACKEND="wayland"
export QT_QPA_PLATFORM="wayland"

# Create runtime directory for twinaos user
mkdir -p "$XDG_RUNTIME_DIR"
chown twinaos:twinaos "$XDG_RUNTIME_DIR"
chmod 700 "$XDG_RUNTIME_DIR"

# Start cage as twinaos user with our GTK4 application
su - twinaos -c "
export XDG_RUNTIME_DIR=/run/user/1000
export WAYLAND_DISPLAY=wayland-0
export XDG_SESSION_TYPE=wayland
export GDK_BACKEND=wayland
cd /home/twinaos
/usr/bin/cage -- /usr/local/bin/twinaos-app
"
EOF

chmod +x /usr/local/bin/start-cage

# Create systemd service for auto-launching cage
cat > /etc/systemd/system/cage.service << 'EOF'
[Unit]
Description=Cage Wayland Compositor
After=systemd-logind.service graphical.target systemd-udev-settle.service
Wants=systemd-logind.service
Requires=systemd-udev-settle.service

[Service]
Type=simple
User=root
Group=root
ExecStart=/usr/local/bin/start-cage
Restart=on-failure
RestartSec=10
StandardOutput=journal
StandardError=journal
Environment=TERM=xterm

[Install]
WantedBy=graphical.target
EOF

# Enable cage service
systemctl enable cage.service

# Enable NetworkManager
systemctl enable NetworkManager.service
systemctl enable bluetooth.service

# Configure PipeWire as default audio system
systemctl --global enable pipewire.service
systemctl --global enable pipewire-pulse.service
systemctl --global enable wireplumber.service

# Enable PipeWire for twinaos user
sudo -u twinaos systemctl --user enable pipewire.service
sudo -u twinaos systemctl --user enable pipewire-pulse.service
sudo -u twinaos systemctl --user enable wireplumber.service

# Create runtime directory structure
mkdir -p /run/user/1000
chown twinaos:twinaos /run/user/1000
chmod 700 /run/user/1000

# Create debug script for troubleshooting
cat > /usr/local/bin/debug-graphics << 'EOF'
#!/bin/bash
echo "=== Graphics Debug Information ==="
echo "DRM devices:"
ls -la /dev/dri/ 2>/dev/null || echo "No DRM devices found"
echo
echo "Framebuffer devices:"
ls -la /dev/fb* 2>/dev/null || echo "No framebuffer devices found"
echo
echo "Graphics modules loaded:"
lsmod | grep -E "(drm|i915|amdgpu|radeon|nouveau)"
echo
echo "Graphics cards detected:"
lspci | grep -i vga
echo
echo "Cage test (as twinaos user):"
su - twinaos -c "XDG_RUNTIME_DIR=/run/user/1000 /usr/bin/cage --help" 2>&1
EOF

chmod +x /usr/local/bin/debug-graphics

# Create simple NetworkManager configuration
cat > /etc/NetworkManager/NetworkManager.conf << 'EOF'
[main]
plugins=ifupdown,keyfile
dns=default

[ifupdown]
managed=false

[device]
wifi.scan-rand-mac-address=no
EOF

# Set root password to empty (allow passwordless login)
passwd -d root

# Configure live user settings
echo "root:x:0:0:root:/root:/bin/bash" > /etc/passwd.new
grep -v "^root:" /etc/passwd >> /etc/passwd.new || true
mv /etc/passwd.new /etc/passwd

# Create basic .bashrc for root
cat > /root/.bashrc << 'EOF'
# Basic bashrc for TwinaOS Live
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export PS1='\u@\h:\w\$ '

# Aliases
alias ll='ls -la'
alias la='ls -la'
alias l='ls -l'

echo "Welcome to TwinaOS Live System"
echo "Cage Wayland compositor should start automatically"
echo "Use 'systemctl status cage' to check compositor status"
EOF

# Ensure proper permissions
chmod 644 /root/.bashrc

# Build and install GTK4 application
echo "I: Building TwinaOS GTK4 application"
cd /usr/local/src/twinaos-app
make
make install

echo "I: TwinaOS Live System configuration completed"
