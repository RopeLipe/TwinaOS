#!/bin/bash

# TwinaOS Live System Configuration Hook
set -e

echo "Configuring TwinaOS live system..."

# Create installer user
useradd -m -s /bin/bash -G sudo installer
echo "installer:installer" | chpasswd

# Configure automatic login for installer user
mkdir -p /etc/systemd/system/getty@tty1.service.d
cat > /etc/systemd/system/getty@tty1.service.d/override.conf << EOF
[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin installer --noclear %I \$TERM
EOF

# Install TwinaOS installer files
echo "Installing TwinaOS installer components..."
mkdir -p /opt/twinaos

# Copy installer components from /tmp (included via includes.chroot)
if [ -d "/tmp/installer-ui" ]; then
    cp -r /tmp/installer-ui /opt/twinaos/
    echo "Copied installer-ui"
fi

if [ -d "/tmp/installer-backend" ]; then
    cp -r /tmp/installer-backend /opt/twinaos/
    echo "Copied installer-backend"
fi

# Install Plymouth theme
if [ -d "/tmp/plymouth" ]; then
    echo "Installing Plymouth theme..."
    cp -r /tmp/plymouth/* /usr/share/plymouth/themes/
    echo "Copied Plymouth theme"
fi

# Set permissions
chown -R installer:installer /opt/twinaos
find /opt/twinaos/installer-backend -name "*.py" -exec chmod +x {} \;

# Install Python dependencies (use requirements.txt for consistency)
cd /opt/twinaos/installer-backend
pip3 install -r requirements.txt

# Create consolidated installer startup script
cat > /opt/twinaos/start-twinaos-installer.sh << 'EOF'
#!/bin/bash
# TwinaOS Consolidated Installer Startup Script
set -e

INSTALLER_DIR="/opt/twinaos"
LOG_FILE="/tmp/twinaos-installer.log"

echo "Starting TwinaOS Installer..." | tee $LOG_FILE

# Wait for network to be ready
echo "Waiting for network..." | tee -a $LOG_FILE
for i in {1..30}; do
    if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
        echo "Network is ready" | tee -a $LOG_FILE
        break
    fi
    sleep 1
done

# Start the Flask backend (serves both API and static files)
echo "Starting installer backend..." | tee -a $LOG_FILE
cd $INSTALLER_DIR/installer-backend
export TWINAOS_DEV_MODE=1
python3 app.py &
BACKEND_PID=$!

# Wait for backend to start
echo "Waiting for backend to start..." | tee -a $LOG_FILE
for i in {1..30}; do
    if curl -s http://localhost:3000/api/health >/dev/null 2>&1; then
        echo "Backend is ready" | tee -a $LOG_FILE
        break
    fi
    sleep 1
done

# Start X server and desktop environment
if ! pgrep -x "Xorg" > /dev/null; then
    echo "Starting X server..." | tee -a $LOG_FILE
    # Start X with openbox as window manager
    startx /usr/bin/openbox-session -- :0 vt7 &
    sleep 3
else
    echo "X server already running" | tee -a $LOG_FILE
fi

# Wait for X to be ready
sleep 2

# Open Firefox to the installer (using DISPLAY variable)
echo "Starting Firefox..." | tee -a $LOG_FILE
DISPLAY=:0 firefox --new-instance --kiosk http://localhost:3000 &

# Keep the script running
wait $BACKEND_PID
EOF

chmod +x /opt/twinaos/start-twinaos-installer.sh

# Create autostart script
mkdir -p /home/installer/.config/autostart
cat > /home/installer/.config/autostart/twinaos-installer.desktop << EOF
[Desktop Entry]
Type=Application
Name=TwinaOS Installer
Exec=/opt/twinaos/start-twinaos-installer.sh
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
EOF

# Configure openbox autostart
mkdir -p /home/installer/.config/openbox
cat > /home/installer/.config/openbox/autostart << EOF
# Start the TwinaOS installer
/opt/twinaos/start-twinaos-installer.sh &
EOF

chown -R installer:installer /home/installer/.config

# Configure Plymouth theme
if [ -d "/usr/share/plymouth/themes/twinaos" ]; then
    echo "Configuring Plymouth theme..."
    update-alternatives --install /usr/share/plymouth/themes/default.plymouth default.plymouth /usr/share/plymouth/themes/twinaos/twinaos.plymouth 100
    update-alternatives --set default.plymouth /usr/share/plymouth/themes/twinaos/twinaos.plymouth
    
    # Update initramfs to include new theme
    update-initramfs -u
    echo "Plymouth theme configured"
fi

echo "TwinaOS live system configured successfully!"
